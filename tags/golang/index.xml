<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Redstalker</title>
    <link>http://taion809.github.io/tags/golang/</link>
    <description>Recent content in Golang on Redstalker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2013 - 2015, Redstalker.com; All Rights Reserved.</copyright>
    <lastBuildDate>Mon, 07 Dec 2015 09:00:43 -0500</lastBuildDate>
    <atom:link href="http://taion809.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>basic sqlx relation scanning</title>
      <link>http://taion809.github.io/blog/2015/12/07/basic-sqlx-relation-scanning/</link>
      <pubDate>Mon, 07 Dec 2015 09:00:43 -0500</pubDate>
      
      <guid>http://taion809.github.io/blog/2015/12/07/basic-sqlx-relation-scanning/</guid>
      <description>&lt;p&gt;Very quick, I wanted to use &lt;code&gt;Get&lt;/code&gt; with a query that contained other tables.  The documentation does not have a lot of examples so here we go.&lt;/p&gt;

&lt;p&gt;Given the following database schema&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE EXTENSION pgcrypto;

CREATE TABLE content_types (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP DEFAULT NULL
);

CREATE TABLE content (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    content_type_id UUID REFERENCES content_types(id) ON DELETE CASCADE ON UPDATE CASCADE,
    content TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP DEFAULT NULL
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I want to query and return a content row with its content_type, here is the struct I want to return.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;github.com/jmoiron/sqlx&amp;quot;
	_ &amp;quot;github.com/lib/pq&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;time&amp;quot;
)

type ContentType struct {
	Id        string     `db:&amp;quot;id&amp;quot;`
	Name      string     `db:&amp;quot;name&amp;quot;`
	CreatedAt *time.Time `db:&amp;quot;created_at&amp;quot;`
	UpdatedAt *time.Time `db:&amp;quot;updated_at&amp;quot;`
	DeletedAt *time.Time `db:&amp;quot;deleted_at&amp;quot;`
}

type Content struct {
	Id          string     `db:&amp;quot;id&amp;quot;`
	Content     string     `db:&amp;quot;content&amp;quot;`
	CreatedAt   *time.Time `db:&amp;quot;created_at&amp;quot;`
	UpdatedAt   *time.Time `db:&amp;quot;updated_at&amp;quot;`
	DeletedAt   *time.Time `db:&amp;quot;deleted_at&amp;quot;`
	ContentType `db:&amp;quot;content_type&amp;quot;`
}

func main() {
	connection, err := sqlx.Connect(&amp;quot;postgres&amp;quot;, &amp;quot;postgres://user:pass@localhost:5432/database&amp;quot;)
	if err != nil {
		log.Fatal(err)
	}

	defer connection.Close()

	query := `
		SELECT content.*,
			   content_types.id AS &amp;quot;content_type.id&amp;quot;,
			   content_types.name AS &amp;quot;content_type.name&amp;quot;,
			   content_types.created_at AS &amp;quot;content_type.created_at&amp;quot;,
			   content_types.updated_at AS &amp;quot;content_type.updated_at&amp;quot;
		FROM content
		JOIN content_types ON content.content_type_id = content_types.id
		WHERE content.id = $1`

	var content Content
	err = connection.Get(&amp;amp;content, query, &amp;quot;UUID-ID-HERE&amp;quot;)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf(&amp;quot;Fetched content: %s of type %s\n&amp;quot;, content.Content, content.ContentType.Name)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope this helps :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Gorilla MUX</title>
      <link>http://taion809.github.io/blog/2014/04/19/getting-started-with-gorilla-mux/</link>
      <pubDate>Sat, 19 Apr 2014 16:05:12 +0000</pubDate>
      
      <guid>http://taion809.github.io/blog/2014/04/19/getting-started-with-gorilla-mux/</guid>
      <description>

&lt;p&gt;This is going to be short and sweet.  I have been looking at getting into Go for awhile but lacked incentive.  That has, as of a week ago, changed and it&amp;rsquo;s full speed ahead.&lt;/p&gt;

&lt;p&gt;For this I will be using &lt;a href=&#34;http://www.gorillatoolkit.org/pkg/mux&#34;&gt;Gorilla MUX&lt;/a&gt;.  If you haven&amp;rsquo;t taken a look at the Gorilla toolkit yet I highly recommend it.  I really enjoy using it, the use as individual components really resonates with me and my style of coding.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Setup for this is pretty fast, &lt;code&gt;go get github.com/gorilla/mux&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-meat-and-potatos&#34;&gt;The Meat and Potatos&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;main.go&lt;/code&gt; for this is pretty simple, but if you haven&amp;rsquo;t used &lt;a href=&#34;http://golang.org/pkg/net/http/&#34;&gt;net/http&lt;/a&gt; from the Golang standard library you might be scratching your head trying to figure out what&amp;rsquo;s going on.&lt;/p&gt;

&lt;h5 id=&#34;example-main-go&#34;&gt;Example main.go&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;github.com/gorilla/mux&amp;quot;
    &amp;quot;net/http&amp;quot;
)

func ArticleHandler(w http.ResponseWriter, r *http.Request) {
    fmt.Println(&amp;quot;Article URI&amp;quot;)
}

func main() {
    // Create a new Router instance
    router := mux.NewRouter()

    // Add the URI /article to be handled by the ArticleHandler method
    router.HandleFunc(&amp;quot;/article&amp;quot;, ArticleHandler)

    // Add the URI / to be handled by a closure
    router.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) {
        fmt.Println(&amp;quot;Root URI&amp;quot;)
    })

    // Pass our router to net/http
    http.Handle(&amp;quot;/&amp;quot;, router)

    // Listen and serve on localhost:8080
    http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alright, that&amp;rsquo;s cool so what do we do with it?&lt;/p&gt;

&lt;p&gt;Well, sounds like a great way build a back end service and a separate front end application using something like AngularJS.&lt;/p&gt;

&lt;p&gt;Next article I will go into more detail.  Until then, you can check out the code for this series here: &lt;a href=&#34;https://github.com/taion809/go-helloblog&#34;&gt;HelloBlog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As always, if there are errors or you have a suggestion send me a message.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>